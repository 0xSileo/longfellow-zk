name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build on ${{ matrix.os_name }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container_image }}

    strategy:
      fail-fast: false

      matrix:
        include:
          - os: ubuntu-24.04-16core
            os_name: "Ubuntu 24.04"
            cpp_compiler: clang++
            install_command: "sudo apt-get update -y && sudo apt-get install -y clang cmake git libssl-dev libzstd-dev libgtest-dev libbenchmark-dev zlib1g-dev"
          - os: ubuntu-24.04-16core
            os_name: "Ubuntu 24.04 GCC"
            cpp_compiler: g++
            install_command: "sudo apt-get update -y && sudo apt-get install -y g++ cmake git libssl-dev libzstd-dev libgtest-dev libbenchmark-dev zlib1g-dev"
          - os: ubuntu-22.04-16core
            os_name: "Ubuntu 22.04"
            cpp_compiler: clang++
            install_command: "sudo apt-get update -y && sudo apt-get install -y clang cmake git libssl-dev libzstd-dev libgtest-dev libbenchmark-dev zlib1g-dev"
          - os: arm-ubuntu-24.04-16core
            os_name: "Ubuntu-arm 24.04"
            cpp_compiler: clang++
            install_command: "sudo apt-get update -y && sudo apt-get install -y clang cmake git libssl-dev libzstd-dev libgtest-dev libbenchmark-dev zlib1g-dev"

          - os_name: "Debian 12"
            os: ubuntu-24.04-16core
            container_image: "debian:12"
            cpp_compiler: clang++
            install_command: "apt-get update -y && apt-get install -y clang cmake git libssl-dev libzstd-dev libgtest-dev libbenchmark-dev zlib1g-dev"
          - os_name: "Debian 11"
            os: ubuntu-24.04-16core
            container_image: "debian:11"
            cpp_compiler: clang++
            install_command: "apt-get update -y && apt-get install -y clang cmake git libssl-dev libzstd-dev libgtest-dev libbenchmark-dev zlib1g-dev"

          - os_name: "Fedora 42"
            os: ubuntu-24.04-16core
            container_image: "fedora:42"
            cpp_compiler: clang++
            install_command: "yum install -y clang libzstd-devel openssl-devel git cmake google-benchmark-devel gtest-devel"
          - os_name: "Fedora 41"
            os: ubuntu-24.04-16core
            container_image: "fedora:41"
            cpp_compiler: clang++
            install_command: "yum install -y clang libzstd-devel openssl-devel git cmake google-benchmark-devel gtest-devel"

    steps:
    - name: Install dependencies
      run: ${{ matrix.install_command }}
      shell: bash

    - name: Checkout
      uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=$GITHUB_WORKSPACE/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=Release
        -S $GITHUB_WORKSPACE/lib

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} -j 16

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -j 16
