// Copyright 2024 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef PRIVACY_PROOFS_ZK_LIB_CIRCUITS_SHA_SHA256_TEST_VALUES_H_
#define PRIVACY_PROOFS_ZK_LIB_CIRCUITS_SHA_SHA256_TEST_VALUES_H_

#include <stdint.h>
#include <stdlib.h>
#include <sys/types.h>

namespace proofs {

struct sha256_testvec {
  const char* str;
  size_t len;
  uint8_t hash[32];
};

// A set of SHA256 test vectors used to verify the circuit implementation.
static const struct sha256_testvec SHA256_TV[] = {
    {"", 0, {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
             0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
             0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}},
    {"abc", 3, {0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea,
                0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23,
                0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c,
                0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad}},
    {"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
     56,
     {0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26,
      0x93, 0x0c, 0x3e, 0x60, 0x39, 0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff,
      0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1}},
    {"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmno"
     "pjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
     112,
     {0xcf, 0x5b, 0x16, 0xa7, 0x78, 0xaf, 0x83, 0x80, 0x03, 0x6c, 0xe5,
      0x9e, 0x7b, 0x04, 0x92, 0x37, 0x0b, 0x24, 0x9b, 0x11, 0xe8, 0xf0,
      0x7a, 0x51, 0xaf, 0xac, 0x45, 0x03, 0x7a, 0xfe, 0xe9, 0xd1}},
    {"D818590293A66776657273696F6E63312E306F646967657374416C676F726974686D67534"
     "8412D32353667646F6354797065756F72672E69736F2E31383031332E352E312E6D444C6C"
     "76616C756544696765737473A2716F72672E69736F2E31383031332E352E31A3005820CF9"
     "C1CB89584BF8C4176A37C2C954A8DC56077D3BA65EE44011E62AB7C63CE2D0158202F00C7"
     "0D5FA9867D7BD2207E0D0B87E35A9AC962A8DE36EE1BE3944B63B39141025820EA9C0339A"
     "AF9BAE8",
     372,
     {0xc7, 0xce, 0x90, 0x99, 0xbd, 0xb6, 0x41, 0x75, 0x02, 0xb7, 0x3e,
      0x44, 0xc9, 0x82, 0x7c, 0xd2, 0x95, 0x6c, 0x54, 0x11, 0x0a, 0x39,
      0xb2, 0x60, 0x67, 0xfb, 0xf7, 0x9f, 0xf8, 0x9b, 0x20, 0xee}},

    // test boundary conditions for padding
    // 55 a's
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
     55,
     {0x9f, 0x43, 0x90, 0xf8, 0xd3, 0x0c, 0x2d, 0xd9, 0x2e, 0xc9, 0xf0,
      0x95, 0xb6, 0x5e, 0x2b, 0x9a, 0xe9, 0xb0, 0xa9, 0x25, 0xa5, 0x25,
      0x8e, 0x24, 0x1c, 0x9f, 0x1e, 0x91, 0x0f, 0x73, 0x43, 0x18}},
    // 56 a's
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
     56,
     {0xb3, 0x54, 0x39, 0xa4, 0xac, 0x6f, 0x09, 0x48, 0xb6, 0xd6, 0xf9,
      0xe3, 0xc6, 0xaf, 0x0f, 0x5f, 0x59, 0x0c, 0xe2, 0x0f, 0x1b, 0xde,
      0x70, 0x90, 0xef, 0x79, 0x70, 0x68, 0x6e, 0xc6, 0x73, 0x8a}},
    // 57 a's
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
     57,
     {0xf1, 0x3b, 0x2d, 0x72, 0x46, 0x59, 0xeb, 0x3b, 0xf4, 0x7f, 0x2d,
      0xd6, 0xaf, 0x1a, 0xcc, 0xc8, 0x7b, 0x81, 0xf0, 0x9f, 0x59, 0xf2,
      0xb7, 0x5e, 0x5c, 0x0b, 0xed, 0x65, 0x89, 0xdf, 0xe8, 0xc6}},
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
     63,
     {0x7d, 0x3e, 0x74, 0xa0, 0x5d, 0x7d, 0xb1, 0x5b, 0xce, 0x4a, 0xd9,
      0xec, 0x06, 0x58, 0xea, 0x98, 0xe3, 0xf0, 0x6e, 0xee, 0xcf, 0x16,
      0xb4, 0xc6, 0xff, 0xf2, 0xda, 0x45, 0x7d, 0xdc, 0x2f, 0x34}},
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
     64,
     {0xff, 0xe0, 0x54, 0xfe, 0x7a, 0xe0, 0xcb, 0x6d, 0xc6, 0x5c, 0x3a,
      0xf9, 0xb6, 0x1d, 0x52, 0x09, 0xf4, 0x39, 0x85, 0x1d, 0xb4, 0x3d,
      0x0b, 0xa5, 0x99, 0x73, 0x37, 0xdf, 0x15, 0x46, 0x68, 0xeb}},
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
     65,
     {0x63, 0x53, 0x61, 0xc4, 0x8b, 0xb9, 0xea, 0xb1, 0x41, 0x98, 0xe7,
      0x6e, 0xa8, 0xab, 0x7f, 0x1a, 0x41, 0x68, 0x5d, 0x6a, 0xd6, 0x2a,
      0xa9, 0x14, 0x6d, 0x30, 0x1d, 0x4f, 0x17, 0xeb, 0x0a, 0xe0}},
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
     66,
     {0xac, 0x13, 0x7f, 0xce, 0x49, 0x83, 0x7c, 0x7c, 0x29, 0x45, 0xf6,
      0x16, 0x0d, 0x3c, 0x0e, 0x67, 0x9e, 0x6f, 0x40, 0x07, 0x08, 0x50,
      0x42, 0x0a, 0x22, 0xbc, 0x10, 0xe0, 0x69, 0x2c, 0xbd, 0xc7}},
    // 2 block boundary conditions
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbb"
     "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
     118,
     {0x16, 0x1f, 0x88, 0x3d, 0xfb, 0x71, 0x6c, 0x8a, 0xcf, 0x49, 0x6c,
      0x04, 0x78, 0x8d, 0x42, 0xf8, 0x0c, 0xe2, 0x21, 0x50, 0x4a, 0xfa,
      0x81, 0x63, 0xc0, 0xe7, 0x3b, 0x11, 0xb5, 0xd2, 0x5f, 0xd0}},
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbb"
     "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc",
     119,
     {0x6c, 0x17, 0x1b, 0xd6, 0x6a, 0x89, 0x03, 0x44, 0xee, 0x32, 0xde,
      0x77, 0xe9, 0xdb, 0x13, 0xc0, 0x18, 0x23, 0xac, 0x16, 0xc6, 0xf4,
      0x76, 0x67, 0x69, 0xd8, 0xa3, 0xf4, 0x91, 0x27, 0xda, 0x98}},
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbb"
     "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccc",
     126,
     {0x8c, 0xfb, 0x31, 0xd1, 0x1d, 0xd7, 0x6e, 0xfb, 0x8c, 0x70, 0x38,
      0xa5, 0x09, 0xb9, 0x80, 0x69, 0xbb, 0xb7, 0xa6, 0x04, 0x67, 0x55,
      0xc5, 0x5b, 0x10, 0x83, 0x9e, 0xd8, 0x72, 0x39, 0x9b, 0x9c}},
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbb"
     "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccd",
     127,
     {0xf4, 0xaf, 0x59, 0x2b, 0xd9, 0x85, 0xc2, 0x48, 0x66, 0x64, 0x61,
      0x9a, 0xff, 0xd7, 0xf6, 0xe1, 0x97, 0x8d, 0x9b, 0x24, 0x01, 0x7c,
      0xe8, 0x63, 0x82, 0x83, 0x62, 0xa1, 0xcd, 0xcd, 0x33, 0xfc}},
    {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbb"
     "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccdd",
     128,
     {0xdb, 0x2c, 0x2b, 0xe4, 0xf8, 0x50, 0xcf, 0xd4, 0x2d, 0xce, 0x67,
      0x8b, 0xe2, 0x63, 0xa9, 0xbb, 0x74, 0x26, 0xf6, 0xbf, 0x39, 0x12,
      0x8e, 0x9e, 0x75, 0xd3, 0xa3, 0xbd, 0x02, 0x31, 0x64, 0x9a}},
    {"\x00", 1, {0x6e, 0x34, 0x0b, 0x9c, 0xff, 0xb3, 0x7a, 0x98,
                 0x9c, 0xa5, 0x44, 0xe6, 0xbb, 0x78, 0x0a, 0x2c,
                 0x78, 0x90, 0x1d, 0x3f, 0xb3, 0x37, 0x38, 0x76,
                 0x85, 0x11, 0xa3, 0x06, 0x17, 0xaf, 0xa0, 0x1d}},
    {"\x00\x01", 2, {0xb4, 0x13, 0xf4, 0x7d, 0x13, 0xee, 0x2f, 0xe6,
                     0xc8, 0x45, 0xb2, 0xee, 0x14, 0x1a, 0xf8, 0x1d,
                     0xe8, 0x58, 0xdf, 0x4e, 0xc5, 0x49, 0xa5, 0x8b,
                     0x79, 0x70, 0xbb, 0x96, 0x64, 0x5b, 0xc8, 0xd2}},
    {"\x00\x01\x02", 3, {0xae, 0x4b, 0x32, 0x80, 0xe5, 0x6e, 0x2f, 0xaf,
                         0x83, 0xf4, 0x14, 0xa6, 0xe3, 0xda, 0xbe, 0x9d,
                         0x5f, 0xbe, 0x18, 0x97, 0x65, 0x44, 0xc0, 0x5f,
                         0xed, 0x12, 0x1a, 0xcc, 0xb8, 0x5b, 0x53, 0xfc}},
    {"\x00\x01\x02\x03", 4, {0x05, 0x4e, 0xde, 0xc1, 0xd0, 0x21, 0x1f, 0x62,
                             0x4f, 0xed, 0x0c, 0xbc, 0xa9, 0xd4, 0xf9, 0x40,
                             0x0b, 0x0e, 0x49, 0x1c, 0x43, 0x74, 0x2a, 0xf2,
                             0xc5, 0xb0, 0xab, 0xeb, 0xf0, 0xc9, 0x90, 0xd8}},
};

// Sample input-output pairs for the block transform.
struct SHA256BlockTests {
  uint32_t input[16];
  uint32_t h[8];
  uint32_t want[8];
};

static const struct SHA256BlockTests kSha_bt_[] = {
    {
        {
            0,
            0xdeadbeef,
            0xbd5b7dde,
            0x9c093ccd,
            0x7ab6fbbc,
            0x5964baab,
            0x3812799a,
            0x16c03889,
            0xf56df778,
            0xd41bb667,
            0xb2c97556,
            0x91773445,
            0x7024f334,
            0x4ed2b223,
            0x2d807112,
            0xc2e3001,
        },
        {0, 0xabadcafe, 0x575b95fc, 0x30960fa, 0xaeb72bf8, 0x5a64f6f6,
         0x612c1f4, 0xb1c08cf2},
        {
            0x656f967b,
            0x508cb605,
            0x109902c5,
            0xbe9909c,
            0x30ed1bc6,
            0x8d3bb28c,
            0x836c99a8,
            0x30731a12,
        },
    },
    {
        {
            0x7,
            0xe,
            0x15,
            0x1c,
            0x23,
            0x2a,
            0x31,
            0x38,
            0x3f,
            0x46,
            0x4d,
            0x54,
            0x5b,
            0x62,
            0x69,
            0x70,
        },
        {0x0, 0x13, 0x26, 0x39, 0x4c, 0x5f, 0x72, 0x85},
        {
            0x95ddd507,
            0x1a7a4b1f,
            0xf5951676,
            0x105a25a3,
            0x511cee03,
            0xd0972a96,
            0xb1cb76d7,
            0xf9f46d72,
        },
    },
    {
        {
            0xf0cee5d1,
            0x615dfa6a,
            0xbda82adf,
            0xcb66fb25,
            0x30d60637,
            0xb1018af9,
            0x2c5c0e06,
            0xb0556e74,
            0xf8e2da1f,
            0xf05b699b,
            0xabbf6d16,
            0x3377e5ad,
            0x46d8cd9e,
            0xcc01d8dd,
            0x5532a535,
            0x34e928ea,
        },
        {
            0x515f007c,
            0x5bd062c2,
            0x12200854,
            0x4db127f8,
            0x216231b,
            0x1f16e9e8,
            0x1190cde7,
            0x66ef438d,
        },
        {
            0x3a3995a,
            0xb55e568e,
            0x5fb4b933,
            0x97c9e9c0,
            0xaea7d67c,
            0xaee17ae4,
            0xcfffacb8,
            0x91d6ab5e,
        },
    }};

}  // namespace proofs

#endif  // PRIVACY_PROOFS_ZK_LIB_CIRCUITS_SHA_SHA256_TEST_VALUES_H_
